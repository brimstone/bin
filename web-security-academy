#!/bin/bash

#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
	cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p exploit_value arg1 [arg2...]

Script description here.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-e, --exploit     Some param description
EOF
	exit
}

cleanup() {
	trap - SIGINT SIGTERM ERR EXIT
	# script cleanup here
}

setup_colors() {
	if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
		NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
	else
		NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
	fi
}

msg() {
	echo >&2 -e "${1-}"
}

die() {
	local msg=$1
	local code=${2-1} # default exit status 1
	msg "$msg"
	exit "$code"
}

parse_params() {
	# default values of variables set from params
	labserver=''

	while :; do
		case "${1-}" in
		-h | --help) usage ;;
		-v | --verbose) set -x ;;
		--no-color) NO_COLOR=1 ;;
		-l | --lab) # lab server
			labserver="${2-}"
			shift
			;;
		-?*) die "Unknown option: $1" ;;
		*) break ;;
		esac
		shift
	done

	args=("$@")

	# check required params and arguments
	[[ -z "${labserver-}" ]] && die "Missing required parameter: lab"
	[[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

	return 0
}

urlencode () {
	old_lc_collate="${LC_COLLATE:-}"
	LC_COLLATE=C
	local length="${#1}"
	for ((i = 0; i < length; i++ )) do
		local c="${1:$i:1}"
		case $c in
		([a-zA-Z0-9.~_-]) printf "$c" ;;
		(*) printf '%%%02X' "'$c" ;;
		esac
	done
	LC_COLLATE=$old_lc_collate
}

parse_params "$@"
setup_colors

# script logic here

exploitserver="https$(curl -s "${labserver}" | grep 'Go to exploit server' | sed "s/^.*https//;s/'.*//")"

case "${args[0]}" in
	"ide")
		payload="$(mktemp)"
		trap "rm '$payload'" EXIT
		printf "HTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\n\nThis is the payload\n" > "$payload"
		(
			s=$(stat -c %Y "$payload")
			while [ -e "$payload" ]; do
				t=$s
				s=$(stat -c %Y "$payload")
				if [ $s != $t ]; then
					curl "${exploitserver}" -H 'Content-Type: application/x-www-form-urlencoded' \
						--data-raw "urlIsHttps=on&responseFile=%2Fexploit&responseHead=$(urlencode "$(awk '/^$/{exit} {print}' "$payload")")&responseBody=$(urlencode "$(awk 'a==1{print} /^$/{a=1}' "$payload")")&formAction=DELIVER_TO_VICTIM"
					continue
				fi
				sleep 1
			done
		)&
		loop="$!"
		${EDITOR:-vi} "$payload"
		echo $loop
	;;
	"log")
		curl -s "${exploitserver}/findme-script" >/dev/null
		ip="$(curl -s "${exploitserver}/log" | awk '/findme-script/ {i=$1} END {print i}')"
		# TODO some tput action in here
		watch "curl -s \"${exploitserver}/log\" | grep -v \"$ip\" | awk '/\/pre>/{a=0}a==1{print}/pre /{a=1}' | sed 's/&quot;/\"/g'"
	;;
	*)
		die "Unknown subcommand: ${args[0]}"
	;;
esac
